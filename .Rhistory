add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(meanIAT$mean,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
p <- p + geom_hline(yintercept = 0, linetype = "dashed", color = "darkblue",
size = 1.2)
p <- p + font("title", size = 20, color = "black", face = "bold")+
font("legend.text", size = 16, color = "black", face = "bold")+
font("xlab", size = 18, color = "black", face = "bold")+
font("ylab", size = 18, color = "black", face = "bold")+
font("xy.text", size = 15, color = "black", face = "bold")
p <- p +theme(legend.position="none")
dpgrob <- ggplotGrob(pp)
p1 <- + annotation_custom(grob = dpgrob)
p1 <- p + annotation_custom(grob = dpgrob)
p1
p <- ggdotchart(meanIAT, x = "Task", y = "mean",
color = "Task",                                # Color by groups
ylab = "IAT score",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(meanIAT$mean,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
p <- p + geom_hline(yintercept = 0, linetype = "dashed", color = "darkblue",
size = 1.2)
p <- p + font("title", size = 20, color = "black", face = "bold")+
font("legend.text", size = 16, color = "black", face = "bold")+
font("xlab", size = 18, color = "black", face = "bold")+
font("ylab", size = 18, color = "black", face = "bold")+
font("xy.text", size = 15, color = "black", face = "bold")
p <- p +theme(legend.position="none")
p
pp
age1 <- age %>% select(session_id,att) %>% mutate(Task = "Age")
ethnic1 <- ethnic %>% select(session_id,att) %>% mutate(Task = "Ethnicity")
race1 <- race %>% select(session_id,att) %>% mutate(Task = "Race")
#skin1 <- skin %>% select(session_id,att) %>% mutate(Task = "Skin")
weight1 <- weight %>% select(session_id,att) %>% mutate(Task = "Weight")
sexuality1 <- sexuality %>% select(session_id,att) %>% mutate(Task = "Sexuality")
#gender_science1 <- gender_science %>% select(session_id,att) %>% mutate(Task = "Gender-Science")
usa1 <- usa %>% select(session_id,att) %>% mutate(Task = "Nationalism")
combined_df <- bind_rows(age1,ethnic1,race1,weight1,sexuality1,usa1)
# compute es
aget <- ttestOneS(age, vars = vars(att), testValue = 0, effectSize = T)
aget <- as.data.frame(aget$ttest)
aged <- round(aget[[6]],2)
racet <- ttestOneS(race, vars = vars(att), testValue = 0, effectSize = T)
racet <- as.data.frame(racet$ttest)
raced <- round(racet[[6]],2)
skint <- ttestOneS(skin, vars = vars(att), testValue = 0, effectSize = T)
weightt <- ttestOneS(weight, vars = vars(att), testValue = 0, effectSize = T)
weightt <- as.data.frame(weightt$ttest)
weightd <- round(weightt[[6]],2)
ethnict <- ttestOneS(ethnic, vars = vars(att), testValue = 0, effectSize = T)
ethnict <- as.data.frame(ethnict$ttest)
ethnicd <- round(ethnict[[6]],2)
sexualityt <- ttestOneS(sexuality, vars = vars(att), testValue = 0, effectSize = T)
sexualityt <- as.data.frame(sexualityt$ttest)
sexualityd <- round(sexualityt[[6]],2)
usat <- ttestOneS(usa, vars = vars(att), testValue = 0, effectSize = T)
usat <- as.data.frame(usat$ttest)
usad <- round(usat[[6]],2)
gen_sci_t <- ttestOneS(gender_science, vars = vars(att), testValue = 0, effectSize = T)
aget <- ttestOneS(age, vars = vars(att), testValue = 0, effectSize = T)
aget <- as.data.frame(aget$ttest)
aged <- round(aget[[6]],2)
racet <- ttestOneS(race, vars = vars(att), testValue = 0, effectSize = T)
racet <- as.data.frame(racet$ttest)
raced <- round(racet[[6]],2)
weightt <- ttestOneS(weight, vars = vars(att), testValue = 0, effectSize = T)
weightt <- as.data.frame(weightt$ttest)
weightd <- round(weightt[[6]],2)
ethnict <- ttestOneS(ethnic, vars = vars(att), testValue = 0, effectSize = T)
ethnict <- as.data.frame(ethnict$ttest)
ethnicd <- round(ethnict[[6]],2)
sexualityt <- ttestOneS(sexuality, vars = vars(att), testValue = 0, effectSize = T)
sexualityt <- as.data.frame(sexualityt$ttest)
sexualityd <- round(sexualityt[[6]],2)
usat <- ttestOneS(usa, vars = vars(att), testValue = 0, effectSize = T)
usat <- as.data.frame(usat$ttest)
usad <- round(usat[[6]],2)
all_ds <- c(aged,raced,skind,weightd,ethnicd,sexualityd,usad,gen_sci_d) %>% as.data.frame()
colnames(all_ds) <- "es"
aget <- ttestOneS(age, vars = vars(att), testValue = 0, effectSize = T)
aget <- as.data.frame(aget$ttest)
aged <- round(aget[[6]],2)
racet <- ttestOneS(race, vars = vars(att), testValue = 0, effectSize = T)
racet <- as.data.frame(racet$ttest)
raced <- round(racet[[6]],2)
weightt <- ttestOneS(weight, vars = vars(att), testValue = 0, effectSize = T)
weightt <- as.data.frame(weightt$ttest)
weightd <- round(weightt[[6]],2)
ethnict <- ttestOneS(ethnic, vars = vars(att), testValue = 0, effectSize = T)
ethnict <- as.data.frame(ethnict$ttest)
ethnicd <- round(ethnict[[6]],2)
sexualityt <- ttestOneS(sexuality, vars = vars(att), testValue = 0, effectSize = T)
sexualityt <- as.data.frame(sexualityt$ttest)
sexualityd <- round(sexualityt[[6]],2)
usat <- ttestOneS(usa, vars = vars(att), testValue = 0, effectSize = T)
usat <- as.data.frame(usat$ttest)
usad <- round(usat[[6]],2)
all_ds <- c(aged,raced,weightd,ethnicd,sexualityd,usad) %>% as.data.frame()
colnames(all_ds) <- "es"
all_ds$Task <- c("Age","Race","Weight","Ethnicity","Sexuality","Nationalism")
pp <- ggdotchart(all_ds, x = "Task", y = "Cohen's d",
color = "Task",                                # Color by groups
ylab = "Direct Reported Preference",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(meanAtt$mean,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
pp <- ggdotchart(all_ds, x = "Task", y = "Cohen's d",
color = "Task",                                # Color by groups
ylab = "Direct Reported Preference",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(all_dsv$es,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
pp <- ggdotchart(all_ds, x = "Task", y = "Cohen's d",
color = "Task",                                # Color by groups
ylab = "Direct Reported Preference",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(all_ds$es,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
pp <- ggdotchart(all_ds, x = "Task", y = "es",
color = "Task",                                # Color by groups
ylab = "Cohen's d",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(all_ds$es,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
pp <- pp + geom_hline(yintercept = 4, linetype = "dashed", color = "darkblue",
size = 1.2)
pp <- pp + font("title", size = 20, color = "black", face = "bold")+
font("legend.text", size = 16, color = "black", face = "bold")+
font("xlab", size = 18, color = "black", face = "bold")+
font("ylab", size = 18, color = "black", face = "bold")+
font("xy.text", size = 15, color = "black", face = "bold")
pp <- pp +theme(legend.position="none")
pp
# compute es
aget <- ttestOneS(age, vars = vars(att), testValue = 4, effectSize = T)
aget <- as.data.frame(aget$ttest)
aged <- round(aget[[6]],2)
racet <- ttestOneS(race, vars = vars(att), testValue = 4, effectSize = T)
racet <- as.data.frame(racet$ttest)
raced <- round(racet[[6]],2)
weightt <- ttestOneS(weight, vars = vars(att), testValue = 4, effectSize = T)
weightt <- as.data.frame(weightt$ttest)
weightd <- round(weightt[[6]],2)
ethnict <- ttestOneS(ethnic, vars = vars(att), testValue = 4, effectSize = T)
ethnict <- as.data.frame(ethnict$ttest)
ethnicd <- round(ethnict[[6]],2)
sexualityt <- ttestOneS(sexuality, vars = vars(att), testValue = 4, effectSize = T)
sexualityt <- as.data.frame(sexualityt$ttest)
sexualityd <- round(sexualityt[[6]],2)
usat <- ttestOneS(usa, vars = vars(att), testValue = 4, effectSize = T)
usat <- as.data.frame(usat$ttest)
usad <- round(usat[[6]],2)
all_ds <- c(aged,raced,weightd,ethnicd,sexualityd,usad) %>% as.data.frame()
colnames(all_ds) <- "es"
all_ds$Task <- c("Age","Race","Weight","Ethnicity","Sexuality","Nationalism")
pp <- ggdotchart(all_ds, x = "Task", y = "es",
color = "Task",                                # Color by groups
ylab = "Cohen's d",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(all_ds$es,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
pp <- pp + geom_hline(yintercept = 4, linetype = "dashed", color = "darkblue",
size = 1.2)
pp <- pp + font("title", size = 20, color = "black", face = "bold")+
font("legend.text", size = 16, color = "black", face = "bold")+
font("xlab", size = 18, color = "black", face = "bold")+
font("ylab", size = 18, color = "black", face = "bold")+
font("xy.text", size = 15, color = "black", face = "bold")
pp <- pp +theme(legend.position="none")
pp
pp <- ggdotchart(all_ds, x = "Task", y = "es",
color = "Task",                                # Color by groups
ylab = "Cohen's d",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(all_ds$es,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
pp <- pp + geom_hline(yintercept = 0, linetype = "dashed", color = "darkblue",
size = 1.2)
pp <- pp + font("title", size = 20, color = "black", face = "bold")+
font("legend.text", size = 16, color = "black", face = "bold")+
font("xlab", size = 18, color = "black", face = "bold")+
font("ylab", size = 18, color = "black", face = "bold")+
font("xy.text", size = 15, color = "black", face = "bold")
pp <- pp +theme(legend.position="none")
pp
aget <- ttestOneS(age, vars = vars(diff_thermo), testValue = 0, effectSize = T)
aget <- as.data.frame(aget$ttest)
aged <- round(aget[[6]],2)
racet <- ttestOneS(race, vars = vars(diff_thermo), testValue = 0, effectSize = T)
racet <- as.data.frame(racet$ttest)
raced <- round(racet[[6]],2)
skint <- ttestOneS(skin, vars = vars(diff_thermo), testValue = 0, effectSize = T)
skint <- as.data.frame(skint$ttest)
skind <- round(skint[[6]],2)
weightt <- ttestOneS(weight, vars = vars(diff_thermo), testValue = 0, effectSize = T)
weightt <- as.data.frame(weightt$ttest)
weightd <- round(weightt[[6]],2)
ethnict <- ttestOneS(ethnic, vars = vars(diff_thermo), testValue = 0, effectSize = T)
sexualityt <- ttestOneS(sexuality, vars = vars(diff_thermo), testValue = 0, effectSize = T)
usat <- ttestOneS(usa, vars = vars(diff_thermo), testValue = 0, effectSize = T)
usat <- as.data.frame(usat$ttest)
usad <- round(usat[[6]],2)
# compute es
aget <- ttestOneS(age, vars = vars(diff_thermo), testValue = 0, effectSize = T)
aget <- as.data.frame(aget$ttest)
aged <- round(aget[[6]],2)
racet <- ttestOneS(race, vars = vars(diff_thermo), testValue = 0, effectSize = T)
racet <- as.data.frame(racet$ttest)
raced <- round(racet[[6]],2)
skint <- ttestOneS(skin, vars = vars(diff_thermo), testValue = 0, effectSize = T)
skint <- as.data.frame(skint$ttest)
skind <- round(skint[[6]],2)
weightt <- ttestOneS(weight, vars = vars(diff_thermo), testValue = 0, effectSize = T)
weightt <- as.data.frame(weightt$ttest)
weightd <- round(weightt[[6]],2)
usat <- ttestOneS(usa, vars = vars(diff_thermo), testValue = 0, effectSize = T)
usat <- as.data.frame(usat$ttest)
usad <- round(usat[[6]],2)
all_ds <- c(aged,raced,skind,weightd,usad) %>% as.data.frame()
colnames(all_ds) <- "es"
all_ds$Task <- c("Age","Race","Skin","Weight","Nationalism")
pp <- ggdotchart(all_ds, x = "Task", y = "es",
color = "Task",                                # Color by groups
ylab = "Cohen's d",
#palette = c("#00AFBB", "#E7B800", "#FC4E07"), # Custom color palette
sorting = "descending",                       # Sort value in descending order
add = "segments",                             # Add segments from y = 0 to dots
rotate = TRUE,                                # Rotate vertically
#group = "cyl",                                # Order by groups
dot.size = 20,                                 # Large dot size
label = round(all_ds$es,3),                        # Add mpg values as dot labels
font.label = list(color = "white", size = 15,
vjust = 0.5),               # Adjust label parameters
ggtheme = theme_pubr()                        # ggplot2 theme
)
pp <- pp + geom_hline(yintercept = 0, linetype = "dashed", color = "darkblue",
size = 1.2)
pp <- pp + font("title", size = 20, color = "black", face = "bold")+
font("legend.text", size = 16, color = "black", face = "bold")+
font("xlab", size = 18, color = "black", face = "bold")+
font("ylab", size = 18, color = "black", face = "bold")+
font("xy.text", size = 15, color = "black", face = "bold")
pp <- pp +theme(legend.position="none")
pp
age <- age %>% drop_na(year)
age$Year <- as.factor(age$year)
race <- race %>% drop_na(year)
race$Year <- as.factor(race$year)
skin <- skin %>% drop_na(year)
skin$Year <- as.factor(skin$year)
ethnic <- ethnic %>% drop_na(year)
ethnic$Year <- as.factor(ethnic$year)
weight <- weight %>% drop_na(year)
weight$Year <- as.factor(weight$year)
sexuality <- sexuality %>% drop_na(year)
sexuality$Year <- as.factor(sexuality$year)
usa <- usa %>% drop_na(year)
usa$Year <- as.factor(usa$year)
gender_science<- gender_science %>% drop_na(year)
gender_science$Year <- as.factor(gender_science$year)
race_iat <- race %>% select(session_id,IAT,Year) %>% mutate(Task = "Race")
skin_iat <- skin %>% select(session_id,IAT,Year) %>% mutate(Task = "Skin")
age_iat <- age %>% select(session_id,IAT,Year) %>% mutate(Task = "Age")
ethnic_iat <- ethnic %>% select(session_id,IAT,Year) %>% mutate(Task = "Ethnicity")
sex_iat <- sexuality %>% select(session_id,IAT,Year) %>% mutate(Task = "Sexuality")
usa_iat <- usa %>% select(session_id,IAT,Year) %>% mutate(Task = "Nationalism")
gender_science_iat <- gender_science %>% select(session_id,IAT,Year) %>% mutate(Task = "Gender-Science")
weight_iat <- weight %>% select(session_id,IAT,Year) %>% mutate(Task = "Weight")
all_iat <- bind_rows(race_iat,skin_iat,ethnic_iat,age_iat,sex_iat,usa_iat,gender_science_iat,weight_iat)
race_att <- race %>% select(session_id,att,Year) %>% mutate(Task = "Race")
#skin_att <- skin %>% select(session_id,att,Year) %>% mutate(Task = "Skin")
age_att <- age %>% select(session_id,att,Year) %>% mutate(Task = "Age")
ethnic_att <- ethnic %>% select(session_id,att,Year) %>% mutate(Task = "Ethnicity")
sex_att <- sexuality %>% select(session_id,att,Year) %>% mutate(Task = "Sexuality")
usa_att <- usa %>% select(session_id,att,Year) %>% mutate(Task = "Nationalism")
#gender_science_att <- gender_science %>% select(session_id,att,Year) %>% mutate(Task = "Gender-Science")
weight_att <- weight %>% select(session_id,att,Year) %>% mutate(Task = "Weight")
all_att <- bind_rows(race_att,ethnic_att,age_att,sex_att,usa_att,weight_att)
race_diff_thermo <- race %>% select(session_id,diff_thermo,Year) %>% mutate(Task = "Race")
skin_diff_thermo <- skin %>% select(session_id,diff_thermo,Year) %>% mutate(Task = "Skin")
age_diff_thermo <- age %>% select(session_id,diff_thermo,Year) %>% mutate(Task = "Age")
#ethnic_diff_thermo <- ethnic %>% select(session_id,diff_thermo,Year) %>% mutate(Task = "Ethnicity")
#sex_diff_thermo <- sexuality %>% select(session_id,diff_thermo,Year) %>% mutate(Task = "Sexuality")
usa_diff_thermo <- usa %>% select(session_id,diff_thermo,Year) %>% mutate(Task = "Nationalism")
#gender_science_diff_thermo <- gender_science %>% select(session_id,diff_thermo,Year) %>% mutate(Task = "Gender-Science")
weight_diff_thermo <- weight %>% select(session_id,diff_thermo,Year) %>% mutate(Task = "Weight")
all_diff_thermo <- bind_rows(race_diff_thermo,skin_diff_thermo,age_diff_thermo,usa_diff_thermo,weight_diff_thermo)
dd <- all_iat %>% group_by(Task, Year) %>% nest()
View(dd)
View(dd[[3]][[1]])
View(dd)
View(dd)
?cohens_d
t.test(age$IAT,mu = 0)
tt <- t.test(age$IAT,mu = 0)
library(psych)
t2d(tt,n=nrow(age))
View(tt)
tt[1]
t2d(tt[1],n=nrow(age))
t2d(tt[[1]],n=nrow(age))
tt <- dd %>% mutate(ttest = map(dd, ~t.test( data =.x, x ~y)))
tt <- dd %>% mutate(ttest = purrr::map(dd, ~t.test( data =.x, x ~y)))
tt <- dd %>% mutate(ttest = purrr::map(dd, ~t.test(IAT,mu = 0)))
tt <- dd %>% mutate(ttest = purrr::map(dd, ~t.test(.x$IAT,mu = 0)))
tt <- dd %>% mutate(ttest = purrr::map(dd, ~t.test("IAT",mu = 0)))
gg <- all_iat %>%
group_by(as.character(Task,Year)) %>%
summarise(t_test = data_frame(t.test(.$IAT)))
gg <- all_iat %>%
group_by(as.character(Task,Year)) %>%
dplyr::summarise(t_test = data_frame(t.test(.$IAT)))
all_iat %>%
group_by(as.character(Task,Year)) %>%
by_slice(~ t.test(.x$IAT))
all_iat %>%
group_by(as.character(Task,Year)) %>%
purrr::by_slice(~ t.test(.x$IAT))
?by_slice
all_iat %>%
group_by(as.character(Task,Year)) %>%
purrr::by_slice(~ t.test(.x$IAT))
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = FALSE,
comment = NA,
prompt = FALSE,
tidy = TRUE
)
#library(summarytools)
library(knitr)
options(max.print="275")
options(width = 1200)
opts_knit$set(width=75)
pacman::p_load(rmdformats,magrittr,stringr,dplyr,knitr,kableExtra,IAT,tidyr,jmv,psych,apa)
options(knitr.table.format = "html") #,encoding = 'UTF-8'
####################################################################################################################
#Read session data
####################################################################################################################
s0 <- readr::read_delim("sessionTasks.txt", "\t",
escape_double = FALSE, trim_ws = TRUE)
sl <- s0[,c("session_id", "task_id", "task_number", "user_agent", "task_creation_date", "session_last_update_date")]
#Get rid of sessions from other studies (got the task_ids from a later in this script and then got back to get rid of those)
table(sl$task_id)
#Get rid of deuplicates
sdup1 <- sl[duplicated(sl[,c('session_id', 'task_number')]),]
#sdup1$session_id
#sl <- sl[!duplicated(sl[,c('session_id', 'task_number')]),]
#Create the task-order data (one row per participant)
task.order <- data.table::dcast(sl, session_id  ~ task_number, value.var = 'task_id')
#Change column names
colnames(task.order)[2:ncol(task.order)] <- paste('ord', colnames(task.order)[2:ncol(task.order)], sep='')
#Get rid of deuplicates
sdup2 <- sl[duplicated(sl[,c('session_id', 'session_last_update_date', 'task_id')]),]
sdup2$session_id
sl <- sl[!duplicated(sl[,c('session_id', 'session_last_update_date', 'task_id')]),]
#Refresh levels of the task_id factor
sl$task_id <- factor(sl$task_id)
#Get data frame of tasks' times
times <- data.table::dcast(sl, session_id + session_last_update_date ~ task_id, value.var = 'task_creation_date')
#Change column names
colnames(times)[3:ncol(times)] <- paste('t.', colnames(times)[3:ncol(times)], sep='')
#Merge tasks and times
times <- merge(times, task.order, by = "session_id")
#Calculate the difference between each time column and the next.
##(Aharaon's code. A bit too complicated for me to understand)##
completion <- data.frame(t(apply(times, 1, function(x){
ret = c()
#Get task names by order
tasks = x[paste("ord", 0:(ncol(task.order) - 1), sep="")]
#Remove missing tasks
tasks = tasks[!is.na(tasks)]
#select tasks by order
t = strptime(unlist(x[paste("t", unlist(tasks), sep=".")]), format="%d%b%Y %T")
#Calculate time difference
for (i in 1:(length(t) - 1)){
ret[i] = difftime(t[i + 1], t[i], units = "secs")
}
#Calculate time of last page (0 if it's a debriefing page or some other task with no data)
ret[length(t)] = difftime(strptime(unlist(x["session_last_update_date"]), format="%d%b%Y %T"), t[length(t)], units = "secs")
#Add NAs for missing tasks to make sure there are equal number of columns for each subject
if (length(t) < ncol(task.order) - 1)
ret[length(t):(ncol(task.order) - 1)] = NA
#Return the computed row
c(x["session_id"], ret)
})))
#Convert time columns to numeric objects
completion[,2:ncol(completion)] = apply(completion[,2:ncol(completion)], 2, as.numeric)
#Rename columns to meaningful names
colnames(completion) = c("session_id", paste("time", 0:(ncol(task.order) - 2), sep=""))
#Combine the task order and completion time data drames
sessions = merge(task.order, completion, by = "session_id")
#Then calculate completion time from individual tasks
theTimes <- sessions[,grepl( "time" , colnames( sessions ) )]
sessions$completion_secs = rowSums(theTimes, na.rm=TRUE)
#Remove data frames to free memory
rm(completion, sl, task.order, theTimes, times, sdup1, sdup2)
#Save the session data (recommended to view this file in Excel, to understand what we saved)
#write.csv(sessions,file=paste(dir, "sessions.csv", sep="\\"))
View(sessions)
sessions$started <- ifelse(is.na(sessions$ord3),FALSE,
ifelse(sessions$ord2=="realstart",TRUE,NA))
#unique(sessions$started)
sessions$finished <- ifelse(is.na(sessions$ord14),FALSE,
ifelse(sessions$ord10=="lastpage",TRUE,NA))
#unique(sessions$finished)
sessions$completed <- ifelse(sessions$started==TRUE & sessions$finished==TRUE,"completed","no")
countstart <- dplyr::count(sessions, started)
countstart <- countstart %>% dplyr::filter(started==TRUE)
countcompleted <- dplyr::count(sessions, completed)
countcompleted <- countcompleted %>% dplyr::filter(completed=="completed")
completionRate <- countcompleted$n/countstart$n
print(paste0("Completion rate for this study is: ", round((completionRate),2)))
sessions$started <- ifelse(is.na(sessions$ord3),FALSE,
ifelse(sessions$ord2=="realstart",TRUE,NA))
#unique(sessions$started)
sessions$finished <- ifelse(is.na(sessions$ord14),FALSE,
ifelse(sessions$ord14=="lastpage",TRUE,NA))
#unique(sessions$finished)
sessions$completed <- ifelse(sessions$started==TRUE & sessions$finished==TRUE,"completed","no")
countstart <- dplyr::count(sessions, started)
countstart <- countstart %>% dplyr::filter(started==TRUE)
countcompleted <- dplyr::count(sessions, completed)
countcompleted <- countcompleted %>% dplyr::filter(completed=="completed")
completionRate <- countcompleted$n/countstart$n
print(paste0("Completion rate for this study is: ", round((completionRate),2)))
sessions$started <- ifelse(is.na(sessions$ord3),FALSE,
ifelse(sessions$ord3=="realstart",TRUE,NA))
#unique(sessions$started)
sessions$finished <- ifelse(is.na(sessions$ord14),FALSE,
ifelse(sessions$ord14=="lastpage",TRUE,NA))
#unique(sessions$finished)
sessions$completed <- ifelse(sessions$started==TRUE & sessions$finished==TRUE,"completed","no")
countstart <- dplyr::count(sessions, started)
countstart <- countstart %>% dplyr::filter(started==TRUE)
View(countstart)
countcompleted <- dplyr::count(sessions, completed)
countcompleted <- countcompleted %>% dplyr::filter(completed=="completed")
completionRate <- countcompleted$n/countstart$n
print(paste0("Completion rate for this study is: ", round((completionRate),2)))
nstart <- length(which(sessions$ord3=="realstart"))
#number of participants who completed the study
ncomplete <- length(which(sessions$ord14=="lastpage"))
#completion rate
completion.rate <- ncomplete/nstart
completion.rate
